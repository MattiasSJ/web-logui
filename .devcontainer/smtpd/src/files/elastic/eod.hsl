include "elastic/settings.hsl";

$httpoptions = [
	"timeout" => 10,
	"tls_default_ca" => true,
	"headers" => ["Content-Type: application/json"]
];

$logdata = [
	"direction" => "inbound"
];

function sendlog($action, $reason, $recipient, $receivedtime, $actionid = none, $metadata = []) {
	global $elasticurl, $httpoptions, $indexname, $indexrotate; // settings
	global $transaction, $connection, $arguments; // eod
	global $logdata;

	$logdata += [
		"action" => $action,
		"reason" => $reason,
		"serial" => "12345678",
		"owner" => $logdata["direction"] == "outbound" ? $transaction["sender"] : $recipient["recipient"],
		"ownerdomain" => $logdata["direction"] == "outbound" ? $transaction["senderaddress"]["domain"] : $recipient["address"]["domain"],
		"hostname" => gethostname(),
		"messageid" => $transaction["id"],
		"senderip" => $connection["remoteip"],
		"senderport" => $connection["remoteport"],
		"serverip" => $connection["localip"],
		"serverport" => $connection["localport"],
		"serverid" => $connection["serverid"],
		"senderhelo" => $connection["helo"]["host"] ?? "",
		"tlsstarted" => isset($connection["tls"]),
		"saslusername" => $connection["auth"]["username"] ?? "",
		"saslauthed" => isset($connection["auth"]),
		"sender" => $transaction["sender"],
		"senderlocalpart" => $transaction["senderaddress"]["localpart"],
		"senderdomain" => $transaction["senderaddress"]["domain"],
		"senderparams" => $transaction["senderparams"],
		"recipient" => $recipient["recipient"],
		"recipientlocalpart" => $recipient["address"]["localpart"],
		"recipientdomain" => $recipient["address"]["domain"],
		"transportid" => $recipient["transportid"],
		"subject" => $arguments["mail"]->getHeader("subject"),
		"size" => $arguments["mail"]->getSize(),
		"receivedtime" => round($receivedtime * 1000),
		"metadata" => $metadata
	];
	if ($actionid) $logdata["actionid"] = $actionid;

	$path = "/".$indexname."-".strftime($indexrotate, $receivedtime)."/_doc";
	if ($actionid) $path += "/".$transaction["id"].":".$actionid;
	http($elasticurl.$path, $httpoptions, [], json_encode($logdata));
  
 	// $index = [
	// 	"index" => [
	// 		"_index" => $indexname."-".strftime($indexrotate, $receivedtime)
	// 	]
	// ];
	// if ($actionid) $index["index"]["_id"] = $transaction["id"].":".$actionid;
	// http_bulk("elastic", json_encode($index)."\n".json_encode($logdata));
}

function ScanRPD(...$args) {
	global $logdata;
	$outbound = $args[0]["outbound"] ?? false;
	$logdata["score_rpd"] = builtin ScanRPD([ "outbound" => $outbound ]);
	$logdata["score_rpd_refid"] = builtin ScanRPD([ "outbound" => $outbound, "refid" => true ]);
	$logdata["score_rpdav"] = builtin ScanRPD([ "outbound" => $outbound, "extended_result" => true ])["virus_score"];
	return builtin ScanRPD(...$args);
}
function ScanSA(...$args) {
	global $logdata;
	$logdata["scores"]["sa"] = builtin ScanSA();
	$logdata["scores"]["sa_rules"] = builtin ScanSA(["rules" => true]);
	return builtin ScanSA(...$args);
}
function ScanKAV(...$args) {
	global $logdata;
	$logdata["scores"]["kav"] = builtin ScanKAV() ? : "";
	return builtin ScanKAV(...$args);
}
function ScanCLAM(...$args) {
	global $logdata;
	$logdata["scores"]["clam"] = builtin ScanCLAM() ? : "";
	return builtin ScanCLAM(...$args);
}
function Defer(...$args) {
    global $transaction, $metadata;
    foreach ($transaction["recipients"] as $recipient) {
        sendlog("DEFER", isset($args[0]) ? $args[0] : "", $recipient, time(), none, $metadata);
    }
    builtin Defer(...$args);
}
function Reject(...$args) {
    global $transaction, $metadata;
    foreach ($transaction["recipients"] as $recipient) {
        sendlog("REJECT", isset($args[0]) ? $args[0] : "", $recipient, time(), none, $metadata);
    }
    builtin Reject(...$args);
}