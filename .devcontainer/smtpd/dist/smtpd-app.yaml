version: "5.8"
servers:
  - id: default
    transport: mx
    phases:
      eod:
        hook: default
transportgroups:
  - id: default
    retry:
      count: 30
      intervals:
        - interval: 60
        - interval: 900
        - interval: 3600
          notify: true
        - interval: 7200
        - interval: 10800
    dsn:
      transport: mx
    transports:
      - id: mx
        session:
          tls:
            mode: dane
resolver:
  cache:
    size: 10000
scripting:
  hooks:
    eod:
      - id: default
        data: >-
          include "elastic/eod.hsl";


          $transactionid = $transaction["id"];

          $sender = $transaction["senderaddress"];

          $recipients = $transaction["recipients"];

          $mail = $arguments["mail"];

          $metadata = [];


          // Queue message for all recipients

          $receivedtime = time();

          $metadata["receivedtime"] = "$receivedtime";

          foreach ($recipients as $recipient) {
              $id = $mail->queue($sender, $recipient["address"], $recipient["transportid"], ["metadata" => $metadata]);
              $actionid = $id["queue"];
              sendlog("QUEUE", "", $recipient, $receivedtime, $actionid, $metadata);
          }


          Accept();
    predelivery: ""
    postdelivery: >-
      include "elastic/settings.hsl";


      $httpoptions = [
      	"timeout" => 10,
      	"tls_default_ca" => true,
      	"headers" => ["Content-Type: application/json"]
      ];


      function sendlog() {
      	global $elasticurl, $httpoptions, $indexname, $indexrotate, $indextype; // settings
      	global $message, $arguments;

      	$receivedtime = GetMetaData()["receivedtime"];
      	$time = time();
      	$logdata["doc"] = [
      		"queue" => [
      			"action" => $arguments["action"] ?? "DELIVER",
      			"retry" => $arguments["retry"],
      			"errormsg" => $arguments["attempt"]["result"]["reason"][0] ?? "",
      			"errorcode" => $arguments["attempt"]["result"]["code"],
      			"transfertime" => $arguments["attempt"]["duration"]
      		],
      		"sender" => $message["sender"],
      		"senderdomain" => $message["senderaddress"]["domain"],
      		"recipient" => $message["recipient"],
      		"recipientdomain" => $message["recipientaddress"]["domain"],
      		"transportid" => $message["transportid"],
      		"finishedtime" => round($time * 1000)
      	];

      	$path = "/".$indexname."-".strftime($indexrotate, $receivedtime)."/".$indextype."/".$message["id"]["transaction"].":".$message["id"]["queue"]."/_update";
      	http($elasticurl.$path, $httpoptions, [], json_encode($logdata));
      }


      sendlog();
  files:
    - id: elastic/eod.hsl
      data: >
        include "elastic/settings.hsl";


        $httpoptions = [
        	"timeout" => 10,
        	"tls_default_ca" => true,
        	"headers" => ["Content-Type: application/json"]
        ];


        $logdata = [
        	"direction" => "inbound"
        ];


        /**
        	* @param $action "QUEUE", "DEFER", "REJECT", "DELETE", "QUARANTINE"
        	* @param $reason string
        	* @param $recipient array https://docs.halon.io/hsl/eodonce.html#v-t-r6
        	* @param $receivedtime number
        	* @param $actionid number
        	* @param $metadata array
        	*/
        function sendlog($action, $reason, $recipient, $receivedtime, $actionid = 1, $metadata = []) {
        	global $elasticurl, $httpoptions, $indexname, $indexrotate, $indextype; // settings
        	global $transaction, $connection, $arguments; // eod
        	global $logdata;

        	$logdata += [
        		"action" => $action,
        		"reason" => $reason,
        		"serial" => gethostname(),
        		"owner" => $logdata["direction"] == "outbound" ? $transaction["sender"] : $recipient["recipient"],
        		"ownerdomain" => $logdata["direction"] == "outbound" ? $transaction["senderaddress"]["domain"] : $recipient["address"]["domain"],
        		"hostname" => gethostname(),
        		"messageid" => $transaction["id"],
        		"senderip" => $connection["remoteip"],
        		"senderport" => $connection["remoteport"],
        		"serverip" => $connection["localip"],
        		"serverport" => $connection["localport"],
        		"serverid" => $connection["serverid"],
        		"senderhelo" => $connection["helo"]["host"] ?? "",
        		"tlsstarted" => isset($connection["tls"]),
        		"saslusername" => $connection["auth"]["username"] ?? "",
        		"saslauthed" => isset($connection["auth"]),
        		"sender" => $transaction["sender"],
        		"senderlocalpart" => $transaction["senderaddress"]["localpart"],
        		"senderdomain" => $transaction["senderaddress"]["domain"],
        		"senderparams" => $transaction["senderparams"],
        		"recipient" => $recipient["recipient"],
        		"recipientlocalpart" => $recipient["address"]["localpart"],
        		"recipientdomain" => $recipient["address"]["domain"],
        		"transportid" => $recipient["transportid"],
        		"actionid" => $actionid,
        		"subject" => $arguments["mail"]->getHeader("subject"),
        		"size" => $arguments["mail"]->getSize(),
        		"receivedtime" => round($receivedtime * 1000),
        		"metadata" => $metadata
        	];

        	$path = "/".$indexname."-".strftime($indexrotate, $receivedtime)."/".$indextype."/".$transaction["id"].":".$actionid;
        	http($elasticurl.$path, $httpoptions, [], json_encode($logdata));
        }


        function ScanRPD(...$args) {
        	global $logdata;
        	$outbound = $args[0]["outbound"] ?? false;
        	$logdata["score_rpd"] = builtin ScanRPD([ "outbound" => $outbound ]);
        	$logdata["score_rpd_refid"] = builtin ScanRPD([ "outbound" => $outbound, "refid" => true ]);
        	$logdata["score_rpdav"] = builtin ScanRPD([ "outbound" => $outbound, "extended_result" => true ])["virus_score"];
        	return builtin ScanRPD(...$args);
        }

        function ScanSA(...$args) {
        	global $logdata;
        	$logdata["scores"]["sa"] = builtin ScanSA();
        	$logdata["scores"]["sa_rules"] = builtin ScanSA(["rules" => true]);
        	return builtin ScanSA(...$args);
        }

        function ScanKAV(...$args) {
        	global $logdata;
        	$logdata["scores"]["kav"] = builtin ScanKAV() ? : "";
        	return builtin ScanKAV(...$args);
        }

        function ScanCLAM(...$args) {
        	global $logdata;
        	$logdata["scores"]["clam"] = builtin ScanCLAM() ? : "";
        	return builtin ScanCLAM(...$args);
        }
    - id: elastic/settings.hsl
      data: |-
        $elasticurl = "http://elasticsearch:9200";
        $indexname = "halon";
        $indexrotate = "%Y-%m-%d";
        $indextype = "_doc";
